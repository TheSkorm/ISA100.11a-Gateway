/*
* Copyright (C) 2013 Nivis LLC.
* Email:   opensource@nivis.com
* Website: http://www.nivis.com
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, version 3 of the License.
* 
* Redistribution and use in source and binary forms must retain this
* copyright notice.

* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*/

/*
 * SecurityNewSessionResponse.h
 *
 *  Created on: Mar 25, 2010
 *      Author: Sorin.Bidian
 */

#ifndef SECURITYNEWSESSIONRESPONSE_H_
#define SECURITYNEWSESSIONRESPONSE_H_

#include "Common/smTypes.h"
#include "Misc/Marshall/NetworkOrderStream.h"

namespace Isa100 {
namespace Security {

struct SecurityNewSessionResponse {

    /**
     * Status shall be the status of the session where 0x1 = SECURITY_SESSION_GRANTED and 0x0 = SECURITY_SESSION_DENIED.
     */
    Uint8 status;

    /**
     * Security_Control shall be with the security level = 0x01 (32-bitAuthentication only)
     * and the Key Identifier Mode shall be b1b0‘01’ corresponding to a Key Index Field length of 1 octet.
     */
    Uint8 securityControl;

    /**
     * Key_Identifier shall be the key identifier of the master key used in protecting this structure.
     */
    Uint8 keyIdentifier;

    /**
     * Time_Stamp shall be the full 32-bit time used in the nonce construction.
     */
    Uint32 timeStamp;

    /**
     * MIC shall be the 32-bit integrity code generated by the AES_CCM* computation.
     */
    Uint8 mic[4];


    void marshall(NE::Misc::Marshall::NetworkOrderStream& stream) {

        stream.write(status);
        stream.write(securityControl);
        stream.write(keyIdentifier);
        stream.write(timeStamp);

        Uint8 sizeMic = sizeof(mic)/sizeof(Uint8);
        for(std::size_t i = 0; i < sizeMic; ++i) {
            stream.write(mic[i]);
        }
    }
};

}
}


#endif /* SECURITYNEWSESSIONRESPONSE_H_ */
