/*
* Copyright (C) 2013 Nivis LLC.
* Email:   opensource@nivis.com
* Website: http://www.nivis.com
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, version 3 of the License.
* 
* Redistribution and use in source and binary forms must retain this
* copyright notice.

* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*/

#ifndef ASL_ALERTACKNOWLEDGE_PRIMITIVETYPES_H_
#define ASL_ALERTACKNOWLEDGE_PRIMITIVETYPES_H_

#include "Common/NETypes.h"
#include "Common/NEAddress.h"
#include "Common/smTypes.h"
#include "AL/ObjectsIDs.h"
#include "ASL/PDU/ClientServerPDU.h"

namespace Isa100 {
namespace ASL {
namespace Services {

/**
 * @author Sorin Bidian
 * @version 1.0
 *
 * Updated - september draft		; sorin.bidian
 * Updated: June 2009 - D2a draft	; sorin.bidian
 *
 */

struct ASL_AlertAcknowledge_Request {
        //NE::Model::ContractPointer serviceContract;
        Uint16 contractID;
        Address32 destination; //useful for loop back determination and logging
        Isa100::Common::ServicePriority::ServicePriority priority;
        bool discardEligible;
        Isa100::Common::TSAP::TSAP_Enum sourceTSAP;
        Isa100::AL::ObjectID::ObjectIDEnum sourceObject;
        Isa100::Common::TSAP::TSAP_Enum destinationTSAP;
        Isa100::AL::ObjectID::ObjectIDEnum destinationObject;
        Isa100::ASL::PDU::ClientServerPDUPointer alertAcknowledge;

        ASL_AlertAcknowledge_Request(Uint16 contractID, Address32 destination,
                    Isa100::Common::ServicePriority::ServicePriority priority, bool discardEligible,
                    Isa100::Common::TSAP::TSAP_Enum sourceTSAP, Isa100::AL::ObjectID::ObjectIDEnum sourceObject,
                    Isa100::Common::TSAP::TSAP_Enum destinationTSAP, Isa100::AL::ObjectID::ObjectIDEnum destinationObject,
                    Isa100::ASL::PDU::ClientServerPDUPointer alertAcknowledge);

        std::string toString();
};

typedef boost::shared_ptr<ASL_AlertAcknowledge_Request> ASL_AlertAcknowledge_RequestPointer;

//defined for alerts generated by SM
struct ASL_AlertAcknowledge_Indication {
    TransmissionTime endToEndTransmissionTime;
    NE::Common::Address128 sourceNetworkAddress;
    Isa100::Common::TSAP::TSAP_Enum sourceTSAP;
    Isa100::AL::ObjectID::ObjectIDEnum sourceObject;
    Isa100::Common::TSAP::TSAP_Enum destinationTSAP;
    Isa100::AL::ObjectID::ObjectIDEnum destinationObject;
    Isa100::ASL::PDU::ClientServerPDUPointer alertAcknowledge;


    ASL_AlertAcknowledge_Indication() {
    }

    ASL_AlertAcknowledge_Indication(TransmissionTime endToEndTransmissionTime_, Address128 sourceNetworkAddress_,
                Isa100::Common::TSAP::TSAP_Enum sourceTSAP_, Isa100::AL::ObjectID::ObjectIDEnum sourceObject_,
                Isa100::Common::TSAP::TSAP_Enum destinationTSAP_, Isa100::AL::ObjectID::ObjectIDEnum destinationObject_,
                Isa100::ASL::PDU::ClientServerPDUPointer alertAcknowledge_) :
                    endToEndTransmissionTime(endToEndTransmissionTime_), sourceNetworkAddress(sourceNetworkAddress_),
                    sourceTSAP(sourceTSAP_), sourceObject(sourceObject_),
                    destinationTSAP(destinationTSAP_), destinationObject(destinationObject_),
                    alertAcknowledge(alertAcknowledge_) {
    }

    std::string toString();

//    std::string toString() {
//        std::ostringstream stream;
//        stream << "AlertAcknowledge_Request {";
//        stream << "TrTime: " << Type::toString(endToEndTransmissionTime);
//        stream << ", SrcAddress:" << sourceNetworkAddress.toString();
//        //stream << ", srcPort: " << sourceTransportLayerPort;
//        stream << ", srcPort: " << (int)sourceTransportLayerPort;
//        stream << ", srcObject: " << sourceObject;
//        stream << ", destTSAP_ID: " << (int) destinationTSAP_ID;
//        stream << ", destObject: " << destinationObject;
//        stream << ", APDU: " << alertAcknowledge->toString();
//        stream << "}";
//        return stream.str();
//    }
};

typedef boost::shared_ptr<ASL_AlertAcknowledge_Indication> ASL_AlertAcknowledge_IndicationPointer;

}
}
}

#endif /*ASL_ALERTACKNOWLEDGE_PRIMITIVETYPES_H_*/
