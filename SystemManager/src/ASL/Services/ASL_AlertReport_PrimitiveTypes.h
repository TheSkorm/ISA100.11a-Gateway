/*
* Copyright (C) 2013 Nivis LLC.
* Email:   opensource@nivis.com
* Website: http://www.nivis.com
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, version 3 of the License.
* 
* Redistribution and use in source and binary forms must retain this
* copyright notice.

* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*/

#ifndef ASL_ALERTREPORT_PRIMITIVETYPES_H_
#define ASL_ALERTREPORT_PRIMITIVETYPES_H_

#include "Common/NETypes.h"
#include "Common/smTypes.h"
#include "Common/Address128.h"
#include "AL/ObjectsIDs.h"
#include "ASL/PDU/ClientServerPDU.h"


namespace Isa100 {
namespace ASL {
namespace Services {

/**
 * @author Sorin Bidian
 * @version 1.0
 *
 * Updated - september draft 		; sorin.bidian
 * Updated: June 2009 - D2a draft 	; sorin.bidian
 *
 */

struct ASL_AlertReport_Indication {
    int elapsedMsec;
    TransmissionTime endToEndTransmissionTime;
    Isa100::Common::TSAP::TSAP_Enum armoTSAP;
    Isa100::AL::ObjectID::ObjectIDEnum armoObject;
    NE::Common::Address128 sourceAddress;
    Isa100::Common::TSAP::TSAP_Enum sinkTSAP;
    Isa100::AL::ObjectID::ObjectIDEnum sinkObject;
    Isa100::ASL::PDU::ClientServerPDUPointer alertReport;


    ASL_AlertReport_Indication(const int elapsedMsec, TransmissionTime endToEndTransmissionTime,
    		Isa100::Common::TSAP::TSAP_Enum armoTSAP,
    		Isa100::AL::ObjectID::ObjectIDEnum armoObject,
    		NE::Common::Address128 sourceNetworkAddress,
    		Isa100::Common::TSAP::TSAP_Enum sinkTSAP,
    		Isa100::AL::ObjectID::ObjectIDEnum sinkObject,
    		Isa100::ASL::PDU::ClientServerPDUPointer alertReport);

    std::string toString();
};

typedef boost::shared_ptr<ASL_AlertReport_Indication> ASL_AlertReport_IndicationPointer;

//defined for alerts generated by SM
struct ASL_AlertReport_Request {
    const Uint16 contractID;
    Address32 destination; //useful for loop back determination and logging
    const Isa100::Common::ServicePriority::ServicePriority priority;
    const bool discardEligible;
    const Isa100::Common::TSAP::TSAP_Enum sinkTSAP;
    const Isa100::AL::ObjectID::ObjectIDEnum sinkObject;
    const Isa100::Common::TSAP::TSAP_Enum armoTSAP;
    const Isa100::AL::ObjectID::ObjectIDEnum armoObject;
    Isa100::ASL::PDU::ClientServerPDUPointer alertReport;

    ASL_AlertReport_Request(const Uint16 contractID_, const Address32 destination_,
                const Isa100::Common::ServicePriority::ServicePriority priority_, const bool discardEligible_,
                const Isa100::Common::TSAP::TSAP_Enum sinkTSAP_, const Isa100::AL::ObjectID::ObjectIDEnum sinkObject_,
                const Isa100::Common::TSAP::TSAP_Enum armoTSAP_, const Isa100::AL::ObjectID::ObjectIDEnum armoObject_,
                Isa100::ASL::PDU::ClientServerPDUPointer alertReport_) :
                    contractID(contractID_), destination(destination_), priority(priority_),
                    discardEligible(discardEligible_), sinkTSAP(sinkTSAP_), sinkObject(sinkObject_),
                    armoTSAP(armoTSAP_), armoObject(armoObject_),
                    alertReport(alertReport_) {
    }

    std::string toString();
};

typedef boost::shared_ptr<ASL_AlertReport_Request> ASL_AlertReport_RequestPointer;

}
}
}

#endif /*ASL_ALERTREPORT_PRIMITIVETYPES_H_*/
