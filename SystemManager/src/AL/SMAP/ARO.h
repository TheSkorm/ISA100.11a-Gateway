/*
* Copyright (C) 2013 Nivis LLC.
* Email:   opensource@nivis.com
* Website: http://www.nivis.com
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, version 3 of the License.
* 
* Redistribution and use in source and binary forms must retain this
* copyright notice.

* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*/

#ifndef ARO_H_
#define ARO_H_

#include "AL/Isa100Object.h"
#include "ASL/PDU/AlertReportPDU.h"
#include "ASL/Services/ASL_AlertReport_PrimitiveTypes.h"
#include "ASL/Services/ASL_AlertAcknowledge_PrimitiveTypes.h"
#include "Common/logging.h"

namespace Isa100 {
namespace AL {
namespace SMAP {

/**
 * Alert receiving object (ARO).
 * This object receives all the alerts destined for the system manager.
 * @author Sorin Bidian, beniamin.tecar, catalin.pop
 *
 * @version 2.0 - New SystemManager Design - October 2009
 */
class ARO: public Isa100::AL::Isa100Object {
        LOG_DEF("I.A.S.ARO");

    public:
        Uint16 errors;

    private:

        void sendAcknowledge(NE::Model::Device* device, Isa100::ASL::Services::ASL_AlertReport_IndicationPointer alertReport);

        void processDeviceAlert(Isa100::ASL::PDU::AlertReportPDUPointer alertPDU, NE::Model::Device* reporterDevice);

        void processCommunicationAlert(Isa100::ASL::PDU::AlertReportPDUPointer alertPDU, NE::Model::Device* reporterDevice);

        void processSecurityAlert(Isa100::ASL::PDU::AlertReportPDUPointer alertPDU, NE::Model::Device* reporterDevice);

        void processProcessAlert(Isa100::ASL::PDU::AlertReportPDUPointer alertPDU, NE::Model::Device* reporterDevice);

        void logAlert(NE::Model::Device* device, ASL::PDU::AlertReportPDUPointer alertPointer);

    public:

        ARO(Isa100::Common::TSAP::TSAP_Enum tsap, NE::Model::IEngine* engine);

        virtual ~ARO();

        Isa100::AL::ObjectID::ObjectIDEnum getObjectID() const {
            return ObjectID::ID_ARO;
        }

        /**
         * Always return false - there is only one instance created and it remains active.
         */
        bool isJobFinished() {
            return false;
        }

        void indicate(Isa100::ASL::Services::ASL_AlertReport_IndicationPointer alertReport);

        void execute(Uint32 currentTime) {
            resetLifeTime(currentTime); //resets the timeout alarm. This object has forever life time.
        }

        /**
         * Checks if the confirmation is awaited by an operation generated by alert reports.
         */
        bool expectConfirm(Isa100::ASL::Services::PrimitiveConfirmationPointer confirmation){
            return false;
        }

};

}
}
}

#endif /*ARO_H_*/
