/*
* Copyright (C) 2013 Nivis LLC.
* Email:   opensource@nivis.com
* Website: http://www.nivis.com
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, version 3 of the License.
* 
* Redistribution and use in source and binary forms must retain this
* copyright notice.

* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*/

/*
 * DO.h
 *
 *  Created on: Mar 18, 2009
 *      Author: sorin.bidian
 */

#ifndef DO_H_
#define DO_H_

#include "AL/Isa100Object.h"
#include "Common/Objects/CommunicationAssociationEndpoint.h"
#include "Common/Objects/ObjectAttributeIndexAndSize.h"
#include "Model/Isa100EngineOperations.h"

namespace Isa100 {
namespace AL {
namespace SMAP {

/**
 * Structure for keeping statistics of one device.
 */
struct DeviceStatistics {
    Int8 rssi;
    Uint16 txSuccessful;
    Uint16 txFailed;
    Uint16 txCCA_Backoff; //Count of unicast transmissions that were aborted due to CCA.

    DeviceStatistics() :
        rssi(-127), txSuccessful(0), txFailed(0), txCCA_Backoff(0) {
    }
};

typedef std::map<NE::Common::Address64, DeviceStatistics> DeviceStatisticsMap;

/**
 * Dispersion object (DO).
 * Standard object type identifier: 5.
 * Used for the publish service; receives published data.
 */
class DO: public Isa100::AL::Isa100Object {
    LOG_DEF("I.A.S.DO")

    private:
        /**
         * Unique identifier for the object.
         */
        Uint16 objectID;

        /**
         * Endpoint of concentrator object that publishes data to this dispersion object.
         *
         */
        Isa100::Common::Objects::CommunicationAssociationEndpoint communicationEndpoint;

        /**
         * Keeps the array of data to identify each piece of data published by a device.
         */
        //Isa100::Common::Objects::ObjectAttributeIndexAndSizeList publishedDataList;
        std::map<Address64, Isa100::Common::Objects::ObjectAttributeIndexAndSizeList> devicePublishedDataList;

        /**
         * Operations that may be generated by the engine as a consequence of publish reports.
         */
        // Isa100::Model::Isa100EngineOperations operations;

//        /**
//         * Maximum no of seconds the confirm(operations) can take.
//         */
//        time_t confirmDuration;
//
//        /**
//         * Start time for confirm(operations).
//         */
//        time_t confirmStartTime;

        /**
         * Holds statistics for each device;
         * map <deviceAddress64, deviceStatistics>.
         */
        DeviceStatisticsMap deviceStatisticsMap;


        // Isa100::Model::Isa100EngineOperations blacklistOperations;

    private:
        void setConfigurations(BytesPointer configParams);

        void sendDeviceStatistics();

        void processChannelDiagnostics();

    public:
        DO(Uint16 objectID, Isa100::Common::TSAP::TSAP_Enum tsap, NE::Model::IEngine* engine);

        ~DO();

        Isa100::AL::ObjectID::ObjectIDEnum getObjectID() const{
            return (ObjectID::ObjectIDEnum) objectID;
        }

        void execute(Uint32 currentTime){
            resetLifeTime(currentTime); //resets the timeout alarm. This object has forever life time.
        }


        /**
         * Receives an Execute service indication that contains configuration information;
         * the Execute request is generated in SMO as part of publish configurations.
         */
        void indicateExecute(Isa100::ASL::Services::PrimitiveIndicationPointer indication);

        void indicate(Isa100::ASL::Services::ASL_Publish_IndicationPointer indication);

        /**
         * After the object is created (publish started) its job is to handle all publish indicates of that kind.
         */
        bool isJobFinished(){
            return false;
        }


        /**
         * Always return true. There is only one Dispersion object and every time a publish is started for a device, the object
         * receives an execute indication containing the publish configuration parameters. This indication should be always
         * expected, otherwise multiple instances of Dispersion object are created.
         */
        bool expectIndicate(Isa100::ASL::Services::PrimitiveIndicationPointer indication){
            return true;
        }


        /**
         * Checks if the confirmation is awaited by an operation generated by publish reports.
         */
        bool expectConfirm(Isa100::ASL::Services::PrimitiveConfirmationPointer confirmation){
            return false;
        }

};

}
}
}

#endif /* DO_H_ */
